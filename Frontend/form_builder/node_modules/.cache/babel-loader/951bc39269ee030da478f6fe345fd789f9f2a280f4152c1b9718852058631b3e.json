{"ast":null,"code":"var _jsxFileName = \"/Users/jimmy/FormBuilder/Frontend/form_builder/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport FormBuilder from \"./form_builder\";\nimport { saveForm, getForms } from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [fields, setFields] = useState([{\n    id: 'field-1',\n    label: 'First Name'\n  }, {\n    id: 'field-2',\n    label: 'Email'\n  }, {\n    id: 'field-3',\n    label: 'Date of Birth'\n  }]);\n  const [forms, setForms] = useState([]);\n\n  // Fetch the saved forms when the component mounts\n  useEffect(() => {\n    const fetchForms = async () => {\n      try {\n        const fetchedForms = await getForms();\n        setForms(fetchedForms); // Save the fetched forms in state\n      } catch (error) {\n        console.error(\"Error fetching forms:\", error);\n      }\n    };\n    fetchForms();\n  }, []); // Empty dependency array means it runs only once, on component mount\n\n  const handleSaveForm = async () => {\n    try {\n      const formData = {\n        title: \"My Custom Form\",\n        // Add form metadata if needed\n        fields: fields // Send the form fields to the backend\n      };\n      const result = await saveForm(formData);\n      console.log('Form saved:', result);\n      alert('Form saved successfully!');\n    } catch (error) {\n      console.error(error);\n      alert('Failed to save form');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Form Builder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormBuilder, {\n      fields: fields,\n      setFields: setFields,\n      saveForm: handleSaveForm // Pass the save function to FormBuilder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSaveForm,\n      children: \"Save Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Saved Forms\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: forms.map((form, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: form.title\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this) // Assuming forms have a 'title' property\n      )\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"6B8hWwACW6iXsItFiXtAZiJMR3M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","FormBuilder","saveForm","getForms","jsxDEV","_jsxDEV","App","_s","fields","setFields","id","label","forms","setForms","fetchForms","fetchedForms","error","console","handleSaveForm","formData","title","result","log","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","form","index","_c","$RefreshReg$"],"sources":["/Users/jimmy/FormBuilder/Frontend/form_builder/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport FormBuilder from \"./form_builder\";\nimport { saveForm, getForms } from './api';\n\nconst App = () => {\n  const [fields, setFields] = useState([\n    { id: 'field-1', label: 'First Name' },\n    { id: 'field-2', label: 'Email' },\n    { id: 'field-3', label: 'Date of Birth' },\n  ]);\n  const [forms, setForms] = useState([]);\n\n  // Fetch the saved forms when the component mounts\n  useEffect(() => {\n    const fetchForms = async () => {\n      try {\n        const fetchedForms = await getForms();\n        setForms(fetchedForms);  // Save the fetched forms in state\n      } catch (error) {\n        console.error(\"Error fetching forms:\", error);\n      }\n    };\n\n    fetchForms();\n  }, []); // Empty dependency array means it runs only once, on component mount\n\n  const handleSaveForm = async () => {\n    try {\n      const formData = {\n        title: \"My Custom Form\",  // Add form metadata if needed\n        fields: fields,  // Send the form fields to the backend\n      };\n      const result = await saveForm(formData);\n      console.log('Form saved:', result);\n      alert('Form saved successfully!');\n    } catch (error) {\n      console.error(error);\n      alert('Failed to save form');\n    }\n  };\n\n  return (\n    <div>\n      <h1>Form Builder</h1>\n      <FormBuilder\n        fields={fields}\n        setFields={setFields}\n        saveForm={handleSaveForm}  // Pass the save function to FormBuilder\n      />\n      <button onClick={handleSaveForm}>Save Form</button>\n\n      <h2>Saved Forms</h2>\n      <ul>\n        {forms.map((form, index) => (\n          <li key={index}>{form.title}</li>  // Assuming forms have a 'title' property\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}