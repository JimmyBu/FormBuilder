{"ast":null,"code":"var _jsxFileName = \"/Users/jimmy/FormBuilder/Frontend/form_builder/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport FormBuilder from \"./form_builder\";\nimport { saveForm, getForms } from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [fields, setFields] = useState([{\n    id: 'field-1',\n    label: 'First Name'\n  }, {\n    id: 'field-2',\n    label: 'Email'\n  }, {\n    id: 'field-3',\n    label: 'Date of Birth'\n  }]);\n\n  // Fetch the saved forms when the component mounts\n  useEffect(() => {\n    const fetchForms = async () => {\n      const forms = await getForms();\n      console.log(forms); // Display the fetched forms in the console\n    };\n    fetchForms();\n  }, []); // Empty dependency array means it runs only once, on component mount\n\n  // Handle saving the form\n  const handleSaveForm = async () => {\n    try {\n      const formData = {\n        title: \"My Custom Form\",\n        // Add form metadata if needed\n        fields: fields // Send the form fields to the backend\n      };\n      const result = await saveForm(formData);\n      console.log('Form saved:', result);\n      alert('Form saved successfully!');\n    } catch (error) {\n      console.error(error);\n      alert('Failed to save form');\n    }\n  };\n\n  // Pass the necessary props to FormBuilder component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Form Builder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FormBuilder, {\n      fields: fields,\n      setFields: setFields,\n      saveForm: handleSaveForm // Pass the save function to FormBuilder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSaveForm,\n      children: \"Save Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"14bSJShX5+S0sbo0m86USiUbjQE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","FormBuilder","saveForm","getForms","jsxDEV","_jsxDEV","App","_s","fields","setFields","id","label","fetchForms","forms","console","log","handleSaveForm","formData","title","result","alert","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/jimmy/FormBuilder/Frontend/form_builder/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport FormBuilder from \"./form_builder\";\nimport { saveForm, getForms } from './api';\n\nconst App = () => {\n    const [fields, setFields] = useState([\n        { id: 'field-1', label: 'First Name' },\n        { id: 'field-2', label: 'Email' },\n        { id: 'field-3', label: 'Date of Birth' },\n    ]);\n\n    // Fetch the saved forms when the component mounts\n    useEffect(() => {\n        const fetchForms = async () => {\n            const forms = await getForms();\n            console.log(forms);  // Display the fetched forms in the console\n        };\n\n        fetchForms();\n    }, []); // Empty dependency array means it runs only once, on component mount\n\n    // Handle saving the form\n    const handleSaveForm = async () => {\n        try {\n            const formData = {\n                title: \"My Custom Form\",  // Add form metadata if needed\n                fields: fields,  // Send the form fields to the backend\n            };\n            const result = await saveForm(formData);\n            console.log('Form saved:', result);\n            alert('Form saved successfully!');\n        } catch (error) {\n            console.error(error);\n            alert('Failed to save form');\n        }\n    };\n\n    // Pass the necessary props to FormBuilder component\n    return (\n        <div>\n            <h1>Form Builder</h1>\n            <FormBuilder\n                fields={fields}\n                setFields={setFields}\n                saveForm={handleSaveForm}  // Pass the save function to FormBuilder\n            />\n            <button onClick={handleSaveForm}>Save Form</button> {/* Button to trigger form save */}\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,gBAAgB;AACxC,SAASC,QAAQ,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACd,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,CACjC;IAAEW,EAAE,EAAE,SAAS;IAAEC,KAAK,EAAE;EAAa,CAAC,EACtC;IAAED,EAAE,EAAE,SAAS;IAAEC,KAAK,EAAE;EAAQ,CAAC,EACjC;IAAED,EAAE,EAAE,SAAS;IAAEC,KAAK,EAAE;EAAgB,CAAC,CAC5C,CAAC;;EAEF;EACAX,SAAS,CAAC,MAAM;IACZ,MAAMY,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3B,MAAMC,KAAK,GAAG,MAAMV,QAAQ,CAAC,CAAC;MAC9BW,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC,CAAE;IACzB,CAAC;IAEDD,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,MAAMI,cAAc,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACA,MAAMC,QAAQ,GAAG;QACbC,KAAK,EAAE,gBAAgB;QAAG;QAC1BV,MAAM,EAAEA,MAAM,CAAG;MACrB,CAAC;MACD,MAAMW,MAAM,GAAG,MAAMjB,QAAQ,CAACe,QAAQ,CAAC;MACvCH,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEI,MAAM,CAAC;MAClCC,KAAK,CAAC,0BAA0B,CAAC;IACrC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZP,OAAO,CAACO,KAAK,CAACA,KAAK,CAAC;MACpBD,KAAK,CAAC,qBAAqB,CAAC;IAChC;EACJ,CAAC;;EAED;EACA,oBACIf,OAAA;IAAAiB,QAAA,gBACIjB,OAAA;MAAAiB,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBrB,OAAA,CAACJ,WAAW;MACRO,MAAM,EAAEA,MAAO;MACfC,SAAS,EAAEA,SAAU;MACrBP,QAAQ,EAAEc,cAAe,CAAE;IAAA;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC,eACFrB,OAAA;MAAQsB,OAAO,EAAEX,cAAe;MAAAM,QAAA,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,KAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnD,CAAC;AAEd,CAAC;AAACnB,EAAA,CA7CID,GAAG;AAAAsB,EAAA,GAAHtB,GAAG;AA+CT,eAAeA,GAAG;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}